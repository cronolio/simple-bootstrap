#!/bin/bash

# based on
# http://www.linuxfromscratch.org/lfs/view/9.0-systemd/
# http://port70.net/~nsz/musl/gcc-9.1.0/
# http://git.savannah.gnu.org/cgit/dragora.git/tree/

run_default(){

export LFS=/mnt/lfs
export runpath=$(pwd)
export LC_ALL=POSIX

echo LFS is $LFS

mkdir -pv $LFS
mount -v -t jfs /dev/vdb3 $LFS
mkdir -pv $LFS/boot
mount -v -t jfs /dev/vdb1 $LFS/boot

mkdir -v $LFS/sources
chmod -v a+wt $LFS/sources

#echo -n "downloading source... "
if [[ ! -f $LFS/sources/fich ]]; then
	rm -rf $LFS/sources/*

	cp -v  $runpath/wget-list $LFS/sources
	cp -v  $runpath/md5sums $LFS/sources
	cp -v  $runpath/no-gentoo.patch $LFS/sources
	cp -rv $runpath/patches $LFS/sources

	if [[ ! -f $LFS/sources/wget-list || ! -f $LFS/sources/md5sums ]]; then
		echo "no wget or md5sum file"
		exit 1
	fi

	wget --input-file=$LFS/sources/wget-list --continue --directory-prefix=$LFS/sources

	pushd $LFS/sources > /dev/null 2>&1 || exit 1
	md5sum -c md5sums > fich
	popd > /dev/null 2>&1 || exit 1
	[[ -f $LFS/sources/fich_failed ]] && rm $LFS/sources/fich_failed
	grep FAILED $LFS/sources/fich && echo "fail" && mv $LFS/sources/fich $LFS/sources/fich_failed && exit 1

	echo "done"

else
	echo "hope source downloaded and OK"

fi

mkdir -v $LFS/tools
ln -sv $LFS/tools /

GROUP_AVAILABLE=$(getent group lfs)
if [ -z "$GROUP_AVAILABLE" ]; then
	echo "adding lfs group"
	groupadd lfs
fi

USER_AVAILABLE=$(getent passwd lfs)
if [ -z "$USER_AVAILABLE" ]; then
	echo "adding lfs user"
	useradd -s /bin/bash -g lfs -m -k /dev/null lfs
fi

chown -v lfs $LFS/tools
chown -v lfs $LFS/sources

#cat /home/bootstrap > /home/lfs/bootstrap

#chown -v lfs /home/lfs/bootstrap
#chmod -v u+x /home/lfs/bootstrap

echo 'set +h
umask 022
PS1="\u:\w\$ "
LFS=/mnt/lfs
source_dir=$LFS/sources
LC_ALL=POSIX
LFS_CROSS=$(echo ${MACHTYPE} | sed "s/-[^-]*/-cross/")
LFS_HOST=$(echo ${MACHTYPE})
LFS_TGT=x86_64-linux-musl
LFS_ARCH="x86_64"
CFLAGS="-march=core2 -O2 -pipe"
CXXFLAGS="-march=core2 -O2 -pipe"
LDFLAGS="-Wl,-O1 -Wl,--as-needed"
MAKEFLAGS="-j 2"
PATH=/tools/bin:/tools/cross-tools/bin:/bin:/usr/bin
export PS1 LFS source_dir LC_ALL LFS_HOST LFS_TGT LFS_CROSS LFS_HOST LFS_ARCH CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS PATH
' > "$runpath"/environment

echo "bootstraping will be continue from lfs user"
}

setvar(){
PACKAGE_A=$(find * -maxdepth 1 -type f -name "*$PACKAGE*")
PACKAGE_N=$(echo "$PACKAGE_A" | sed -r 's/(\.tar|\.bz|\.gz|\.xz|\.zip)//g')
}


continue_from_user(){

su lfs $0 from-user
}

from_user(){
echo "continue from $USER user"

REQENV="REQENV HOME USER TERM LS_COLORS PS1 LFS source_dir LC_ALL LFS_HOST LFS_CROSS LFS_TGT LFS_ARCH CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS PATH runpath"

for C in $(printenv | cut -d '=' -f 1); do
#   echo $C
    echo $REQENV | grep $C > /dev/null 2>&1 || unset $C > /dev/null 2>&1
done

set -e

source "$runpath"/environment

echo "LFS is $LFS"

cd $LFS/sources

#####################
case $(uname -m) in
  x86_64) mkdir -pv /tools/lib && ln -sv lib /tools/lib64 ;;
esac

case $(uname -m) in
  x86_64) mkdir -pv /tools/cross-tools/lib && ln -sv lib /tools/cross-tools/lib64 ;;
esac
#####################
echo zzzzzzzzzz binutils 1 step
PACKAGE=binutils-2.32.tar.xz setvar

echo "arhive $PACKAGE_A"
echo "name $PACKAGE_N"

echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"

cd $PACKAGE_N
mkdir -v build
cd build

../configure --prefix=/tools/cross-tools         \
             --with-sysroot=$LFS                 \
             --with-lib-path=/tools/lib          \
             --target=$LFS_TGT                   \
             --disable-nls                       \
             --disable-werror                    \
             --disable-multilib                  \
             --enable-deterministic-archives     \
             --disable-separate-code             \
             --disable-compressed-debug-sections \
             --disable-ppl-version-check         \
             --disable-cloog-version-check

make MAKEINFO="true" configure-host
make MAKEINFO="true"

make MAKEINFO="true" install

cd $source_dir
echo -n "removing... "
rm -rf $PACKAGE_N && echo "done"

############################
echo zzzzzzzz gcc step 1
PACKAGE=gcc setvar
echo "arhive $PACKAGE_A"
echo "name $PACKAGE_N"

echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"

cd $PACKAGE_N

tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc

cd mpfr
for file in $source_dir/patches/mpfr/*.patch ; do
  if test -f $file; then
    rm -f PATCHES
    patch -p1 < $file
  fi
done
unset file

cd $source_dir/$PACKAGE_N

for directory in gmp mpfr mpc; do
  if [[ "$directory" = 'gmp' ]]; then
    cp -f "$source_dir"/patches/common/config.guess gmp/configfsf.guess
    cp -f "$source_dir"/patches/common/config.sub gmp/config.sub
  else
    cp -f "$source_dir"/patches/common/config.guess "$directory"/config.guess
    cp -f "$source_dir"/patches/common/config.sub "$directory"/config.sub
  fi
done
unset directory

# Apply specific patches for the support in musl.
# http://port70.net/~nsz/musl/gcc-9.1.0/
patch -Np1 -i "$source_dir/patches/gcc/230-musl_libssp.patch"
patch -Np1 -i "$source_dir/patches/gcc/0002-posix_memalign.patch"
patch -Np1 -i "$source_dir/patches/gcc/0003-libatomic-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0004-libgomp-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0005-libitm-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0006-libvtv-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0007-j2.patch"
patch -Np1 -i "$source_dir/patches/gcc/0008-s390x-muslldso.patch"
patch -Np1 -i "$source_dir/patches/gcc/0009-microblaze-pr65649.patch"
patch -Np1 -i "$source_dir/patches/gcc/0010-ldbl128-config.patch"
patch -Np1 -i "$source_dir/patches/gcc/0011-m68k.patch"
patch -Np1 -i "$source_dir/patches/gcc/0012-static-pie.patch"
patch -Np1 -i "$source_dir/patches/gcc/0013-invalid-tls-model.patch"

for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac

mkdir -v build
cd       build

../configure                                       \
    --target=${LFS_TGT}                            \
    --prefix=/tools/cross-tools                    \
    --with-sysroot=${LFS}                          \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-clocale=generic                       \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libitm                               \
    --disable-libcilkrts                           \
    --disable-libstdcxx                            \
    --disable-gnu-indirect-function                \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libmudflap                           \
    --disable-libsanitizer                         \
    --with-newlib                                  \
    --without-headers                              \
    --without-ppl                                  \
    --without-cloog                                \
    --enable-languages=c

make all-gcc all-target-libgcc
make install-gcc install-target-libgcc

cd $source_dir

rm -rf $PACKAGE_N

##########################################
### linux api
PACKAGE=linux-5.2.8 setvar
echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"

cd $PACKAGE_N

make mrproper
make INSTALL_HDR_PATH=dest headers_install
mkdir -v /tools/include
cp -rv dest/include/* /tools/include

cd $source_dir
rm -rf $PACKAGE_N

#########################################
### musl
PACKAGE=musl-1.1.24.tar.gz setvar
echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"
cd $PACKAGE_N

./configure                       \
      CC="${LFS_TGT}-gcc"         \
      CROSS_COMPILE=${LFS_TGT}-   \
      --prefix=/tools             \
      --syslibdir=/tools/lib      \
      --target=$LFS_TGT           \
      --includedir=/tools/include \
      --disable-static

make -j1
make install

${LFS_TGT}-gcc -c "$source_dir"/patches/gcc/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
${LFS_TGT}-ar rc libssp_nonshared.a __stack_chk_fail_local.o
${LFS_TGT}-ranlib libssp_nonshared.a
cp -p libssp_nonshared.a /tools/lib

cd $source_dir
rm -rf $PACKAGE_N

#################################################
echo test
echo 'int main(){}' > dummy.c
x86_64-linux-musl-gcc dummy.c
x86_64-linux-musl-readelf -l a.out
rm -v a.out dummy.c

#################################################
echo zzzzzzzz gcc cross step 2
PACKAGE=gcc setvar
echo "arhive $PACKAGE_A"
echo "name $PACKAGE_N"

echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"

cd $PACKAGE_N

tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc

cd mpfr
for file in $source_dir/patches/mpfr/* ; do
  if test -f $file; then
    rm -f PATCHES
    patch -p1 < $file
  fi
done
unset file
cd $source_dir/$PACKAGE_N

for directory in gmp mpfr mpc; do
  if [[ "$directory" = 'gmp' ]]; then
    cp -f "$source_dir"/patches/common/config.guess gmp/configfsf.guess
    cp -f "$source_dir"/patches/common/config.sub gmp/config.sub
  else
    cp -f "$source_dir"/patches/common/config.guess "$directory"/config.guess
    cp -f "$source_dir"/patches/common/config.sub "$directory"/config.sub
  fi
done
unset directory

# Apply specific patches for the support in musl.
# http://port70.net/~nsz/musl/gcc-9.1.0/

patch -Np1 -i "$source_dir/patches/gcc/230-musl_libssp.patch"
patch -Np1 -i "$source_dir/patches/gcc/0002-posix_memalign.patch"
patch -Np1 -i "$source_dir/patches/gcc/0003-libatomic-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0004-libgomp-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0005-libitm-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0006-libvtv-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0007-j2.patch"
patch -Np1 -i "$source_dir/patches/gcc/0008-s390x-muslldso.patch"
patch -Np1 -i "$source_dir/patches/gcc/0009-microblaze-pr65649.patch"
patch -Np1 -i "$source_dir/patches/gcc/0010-ldbl128-config.patch"
patch -Np1 -i "$source_dir/patches/gcc/0011-m68k.patch"
patch -Np1 -i "$source_dir/patches/gcc/0012-static-pie.patch"
patch -Np1 -i "$source_dir/patches/gcc/0013-invalid-tls-model.patch"

for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac

mkdir -v build
cd       build

../configure                                       \
    --target=${LFS_TGT}                            \
    --prefix=/tools/cross-tools                    \
    --with-sysroot=${LFS}                          \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-multilib                             \
    --enable-languages=c,c++                       \
    --enable-clocale=generic                       \
    --enable-tls                                   \
    --enable-libstdcxx-time                        \
    --enable-checking=release                      \
    --enable-fully-dynamic-string                  \
    --enable-libssp                                \
    --disable-symvers                              \
    --disable-gnu-indirect-function                \
    --disable-libmudflap                           \
    --disable-libsanitizer                         \
    --disable-libmpx                               \
    --disable-nls                                  \
    --disable-lto-plugin

make AS_FOR_TARGET="${LFS_TGT}-as" LD_FOR_TARGET="${LFS_TGT}-ld" all
make install

${LFS_TGT}-gcc -c "$source_dir"/patches/gcc/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
${LFS_TGT}-ar rc libssp_nonshared.a __stack_chk_fail_local.o
${LFS_TGT}-ranlib libssp_nonshared.a
cp -p libssp_nonshared.a /tools/lib

cd $source_dir

rm -rf $PACKAGE_N

#################################################
echo test
echo 'int main(){}' > dummy.c
x86_64-linux-musl-gcc dummy.c
x86_64-linux-musl-readelf -l a.out
rm -v a.out dummy.c

###############################################################
echo stage2 stage2 stage2
###############################################################
echo binutils stage2
PACKAGE=binutils-2.32.tar.xz setvar
echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"
cd $PACKAGE_N

mkdir -v build
cd	 build

../configure                   \
    --target=${LFS_TGT}        \
    --build=${LFS_TGT}         \
    --host=${LFS_TGT}          \
    --prefix=/tools            \
    --with-lib-path=/tools/lib \
    --with-sysroot             \
    --enable-deterministic-archives \
    --enable-relro             \
    --enable-threads=auto      \
    --enable-64-bit-bfd        \
    --enable-initfini-array    \
    --disable-separate-code    \
    --disable-compressed-debug-sections \
    --disable-nls \
    --disable-werror \
    --disable-ppl-version-check \
    --disable-cloog-version-check

make MAKEINFO="true"
make MAKEINFO="true" install

make -C ld clean
make -C ld LIB_PATH=/lib:/usr/lib
cp -v ld/ld-new /tools/bin

cd $source_dir
rm -rf $PACKAGE_N

############################
echo zzzzzzzz gcc stege2
PACKAGE=gcc setvar
echo -n "extracting... "
tar -xf $PACKAGE_A
echo "done"
cd $PACKAGE_N

tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc

${LFS_TGT}-gcc -c "$source_dir"/patches/gcc/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
${LFS_TGT}-ar rc libssp_nonshared.a __stack_chk_fail_local.o
${LFS_TGT}-ranlib libssp_nonshared.a
cp -p libssp_nonshared.a /tools/lib

cd mpfr
for file in $source_dir/patches/mpfr/*.patch ; do
  if test -f $file; then
    rm -f PATCHES
    patch -p1 < $file
  fi
done
unset file

cd $source_dir/$PACKAGE_N

for directory in gmp mpfr mpc; do
  if [[ "$directory" = 'gmp' ]]; then
    cp -f "$source_dir"/patches/common/config.guess gmp/configfsf.guess
    cp -f "$source_dir"/patches/common/config.sub gmp/config.sub
  else
    cp -f "$source_dir"/patches/common/config.guess "$directory"/config.guess
    cp -f "$source_dir"/patches/common/config.sub "$directory"/config.sub
  fi
done
unset directory

# Apply specific patches for the support in musl.
# http://port70.net/~nsz/musl/gcc-9.1.0/
patch -Np1 -i "$source_dir/patches/gcc/230-musl_libssp.patch"
patch -Np1 -i "$source_dir/patches/gcc/0002-posix_memalign.patch"
patch -Np1 -i "$source_dir/patches/gcc/0003-libatomic-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0004-libgomp-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0005-libitm-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0006-libvtv-test-fix.patch"
patch -Np1 -i "$source_dir/patches/gcc/0007-j2.patch"
patch -Np1 -i "$source_dir/patches/gcc/0008-s390x-muslldso.patch"
patch -Np1 -i "$source_dir/patches/gcc/0009-microblaze-pr65649.patch"
patch -Np1 -i "$source_dir/patches/gcc/0010-ldbl128-config.patch"
patch -Np1 -i "$source_dir/patches/gcc/0011-m68k.patch"
patch -Np1 -i "$source_dir/patches/gcc/0012-static-pie.patch"
patch -Np1 -i "$source_dir/patches/gcc/0013-invalid-tls-model.patch"

cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $(${LFS_TGT}-gcc -print-libgcc-file-name)`/include-fixed/limits.h

for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac

mkdir -v build
cd       build

../configure                                       \
    --target=${LFS_TGT}                            \
    --build=${LFS_TGT}                             \
    --host=${LFS_TGT}                              \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-multilib                             \
    --enable-clocale=generic                       \
    --enable-cet=auto                              \
    --enable-tls                                   \
    --enable-libstdcxx-time                        \
    --enable-install-libiberty                     \
    --enable-fully-dynamic-string                  \
    --enable-default-ssp                           \
    --enable-default-pie                           \
    --enable-libssp                                \
    --disable-symvers                              \
    --disable-bootstrap                            \
    --disable-libstdcxx-pch                        \
    --disable-gnu-indirect-function                \
    --disable-libmudflap                           \
    --disable-libsanitizer                         \
    --disable-nls

make
make install

ln -sv gcc /tools/bin/cc

which gcc
which ar
which ranlib

${LFS_TGT}-gcc -c "$source_dir"/patches/gcc/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
${LFS_TGT}-ar rc libssp_nonshared.a __stack_chk_fail_local.o
${LFS_TGT}-ranlib libssp_nonshared.a
cp -p libssp_nonshared.a /tools/lib

cd $source_dir
rm -rf $PACKAGE_N && echo "removing done"

############################
############################
export PATH=/tools/bin:/bin:/usr/bin

echo zzzzzzzz check native compiler and linker

which cc
which readelf
echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'

rm -v dummy.c a.out





